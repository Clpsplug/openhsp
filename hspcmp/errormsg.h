
//
//	errormsg.cpp header
//
#ifndef __errormsg_h
#define __errormsg_h

#include <exception>

// error for CodeGenerator
enum class CGERROR_CODE {
	NONE = 0,
	UNKNOWN,
	SYNTAX,
	FLOATEXP,
	CALCEXP,
	PRMEND,
	ARRAYEXP,
	LABELEXIST,
	LABELNAME,

	REPEAT_OVERFLOW,
	BREAK_WO_REPEAT,
	CONT_WO_REPEAT,
	LOOP_WO_REPEAT,
	LOOP_NOTFOUND,

	ELSE_WO_IF,
	BLOCK_NOT_CLOSED,
	BLOCKEXP,
	BAD_ELSE_EXP,
	IF_OVERFLOW,

	FATAL,

	PP_SYNTAX,
	PP_NO_REGCMD,
	PP_NAMEREQUIRED,
	PP_WRONG_PARAM_NAME,
	PP_NO_USELIB,
	PP_ALREADY_USE_FUNC,
	PP_ALREADY_USE_PARAM,
	PP_BAD_STRUCT_SOURCE,
	PP_BAD_STRUCT,
	PP_BAD_IMPORT_NAME,
	PP_ALREADY_USE_FUNCNAME,
	PP_INCOMPATIBLE_IMPORT,
	PP_MODINIT_USED,
	PP_MODTERM_USED,

	MULTILINE_STR,
	PP_ALREADY_USE_TAGNAME,
	PP_NO_USECOM,
	PP_BAD_IMPORT_INDEX,
	PP_BAD_IMPORT_IID,

	VAR_NOINIT,
	WRONG_VARIABLE,

	MAX,
};

struct CGERROR : public std::exception {
    CGERROR_CODE code;
    CGERROR() {}
    explicit CGERROR(CGERROR_CODE c) : code(c) {}
};

#define CGERROR_NONE CGERROR(CGERROR_CODE::NONE)
#define CGERROR_UNKNOWN CGERROR(CGERROR_CODE::UNKNOWN)
#define CGERROR_SYNTAX CGERROR(CGERROR_CODE::SYNTAX)
#define CGERROR_FLOATEXP CGERROR(CGERROR_CODE::FLOATEXP)
#define CGERROR_CALCEXP CGERROR(CGERROR_CODE::CALCEXP)
#define CGERROR_PRMEND CGERROR(CGERROR_CODE::PRMEND)
#define CGERROR_ARRAYEXP CGERROR(CGERROR_CODE::ARRAYEXP)
#define CGERROR_LABELEXIST CGERROR(CGERROR_CODE::LABELEXIST)
#define CGERROR_LABELNAME CGERROR(CGERROR_CODE::LABELNAME)

#define CGERROR_REPEAT_OVERFLOW CGERROR(CGERROR_CODE::REPEAT_OVERFLOW)
#define CGERROR_BREAK_WO_REPEAT CGERROR(CGERROR_CODE::BREAK_WO_REPEAT)
#define CGERROR_CONT_WO_REPEAT CGERROR(CGERROR_CODE::CONT_WO_REPEAT)
#define CGERROR_LOOP_WO_REPEAT CGERROR(CGERROR_CODE::LOOP_WO_REPEAT)
#define CGERROR_LOOP_NOTFOUND CGERROR(CGERROR_CODE::LOOP_NOTFOUND)

#define CGERROR_ELSE_WO_IF CGERROR(CGERROR_CODE::ELSE_WO_IF)
#define CGERROR_BLOCK_NOT_CLOSED CGERROR(CGERROR_CODE::BLOCK_NOT_CLOSED)
#define CGERROR_BLOCKEXP CGERROR(CGERROR_CODE::BLOCKEXP)
#define CGERROR_BAD_ELSE_EXP CGERROR(CGERROR_CODE::BAD_ELSE_EXP)
#define CGERROR_IF_OVERFLOW CGERROR(CGERROR_CODE::IF_OVERFLOW)

#define CGERROR_FATAL CGERROR(CGERROR_CODE::FATAL)

#define CGERROR_PP_SYNTAX CGERROR(CGERROR_CODE::PP_SYNTAX)
#define CGERROR_PP_NO_REGCMD CGERROR(CGERROR_CODE::PP_NO_REGCMD)
#define CGERROR_PP_NAMEREQUIRED CGERROR(CGERROR_CODE::PP_NAMEREQUIRED)
#define CGERROR_PP_WRONG_PARAM_NAME CGERROR(CGERROR_CODE::PP_WRONG_PARAM_NAME)
#define CGERROR_PP_NO_USELIB CGERROR(CGERROR_CODE::PP_NO_USELIB)
#define CGERROR_PP_ALREADY_USE_FUNC CGERROR(CGERROR_CODE::PP_ALREADY_USE_FUNC)
#define CGERROR_PP_ALREADY_USE_PARAM CGERROR(CGERROR_CODE::PP_ALREADY_USE_PARAM)
#define CGERROR_PP_BAD_STRUCT_SOURCE CGERROR(CGERROR_CODE::PP_BAD_STRUCT_SOURCE)
#define CGERROR_PP_BAD_STRUCT CGERROR(CGERROR_CODE::PP_BAD_STRUCT)
#define CGERROR_PP_BAD_IMPORT_NAME CGERROR(CGERROR_CODE::PP_BAD_IMPORT_NAME)
#define CGERROR_PP_ALREADY_USE_FUNCNAME CGERROR(CGERROR_CODE::PP_ALREADY_USE_FUNCNAME)
#define CGERROR_PP_INCOMPATIBLE_IMPORT CGERROR(CGERROR_CODE::PP_INCOMPATIBLE_IMPORT)
#define CGERROR_PP_MODINIT_USED CGERROR(CGERROR_CODE::PP_MODINIT_USED)
#define CGERROR_PP_MODTERM_USED CGERROR(CGERROR_CODE::PP_MODTERM_USED)

#define CGERROR_MULTILINE_STR CGERROR(CGERROR_CODE::MULTILINE_STR)
#define CGERROR_PP_ALREADY_USE_TAGNAME CGERROR(CGERROR_CODE::PP_ALREADY_USE_TAGNAME)
#define CGERROR_PP_NO_USECOM CGERROR(CGERROR_CODE::PP_NO_USECOM)
#define CGERROR_PP_BAD_IMPORT_INDEX CGERROR(CGERROR_CODE::PP_BAD_IMPORT_INDEX)
#define CGERROR_PP_BAD_IMPORT_IID CGERROR(CGERROR_CODE::PP_BAD_IMPORT_IID)

#define CGERROR_VAR_NOINIT CGERROR(CGERROR_CODE::VAR_NOINIT)
#define CGERROR_WRONG_VARIABLE CGERROR(CGERROR_CODE::WRONG_VARIABLE)

#define CGERROR_MAX CGERROR(CGERROR_CODE::MAX)

char *cg_geterror( CGERROR_CODE error );


#endif
